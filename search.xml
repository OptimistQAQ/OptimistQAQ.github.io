<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pandas学习笔记</title>
      <link href="/2020/06/18/pandas-xue-xi-bi-ji/"/>
      <url>/2020/06/18/pandas-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>python的强大正是因为这些库函数的存在，因此学好这些库函数至关重要，尤其是想要学习机器学习的人。</p><p>[TOC]</p><h2 id="Pandas方法"><a href="#Pandas方法" class="headerlink" title="Pandas方法"></a>Pandas方法</h2><p>使用pandas首先要导入pandas包。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token operator">//</span>标准的导入pandas的代码</code></pre><h3 id="读入csv文件"><a href="#读入csv文件" class="headerlink" title="读入csv文件"></a>读入csv文件</h3><pre class=" language-python"><code class="language-python">trainData <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./Data/train.csv"</span><span class="token punctuation">)</span> <span class="token operator">//</span><span class="token punctuation">.</span><span class="token operator">/</span>Data<span class="token operator">/</span>   表示路径，train表示文件名</code></pre><h3 id="标题获取文件中的前5行数据"><a href="#标题获取文件中的前5行数据" class="headerlink" title="标题获取文件中的前5行数据"></a>标题获取文件中的前5行数据</h3><pre class=" language-python"><code class="language-python">trainData<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>是pandas中的一个方法，可以获取文件中的前<span class="token number">5</span>行数据</code></pre><p><img src="https://img-blog.csdnimg.cn/20190521193906796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NTQ4Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="info-迅速获取数据描述"><a href="#info-迅速获取数据描述" class="headerlink" title="info() 迅速获取数据描述"></a>info() 迅速获取数据描述</h3><pre class=" language-python"><code class="language-python">trainData<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span> 方法就不具体介绍了   下面给出运行结果<span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span>    运行结果<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">891</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">890</span>Data columns <span class="token punctuation">(</span>total <span class="token number">10</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>Pclass      <span class="token number">891</span> non<span class="token operator">-</span>null int64Name        <span class="token number">891</span> non<span class="token operator">-</span>null objectSex         <span class="token number">891</span> non<span class="token operator">-</span>null objectAge         <span class="token number">714</span> non<span class="token operator">-</span>null float64SibSp       <span class="token number">891</span> non<span class="token operator">-</span>null int64Parch       <span class="token number">891</span> non<span class="token operator">-</span>null int64Ticket      <span class="token number">891</span> non<span class="token operator">-</span>null objectFare        <span class="token number">891</span> non<span class="token operator">-</span>null float64Cabin       <span class="token number">204</span> non<span class="token operator">-</span>null objectEmbarked    <span class="token number">889</span> non<span class="token operator">-</span>null objectdtypes<span class="token punctuation">:</span> float64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">69.7</span><span class="token operator">+</span> KB</code></pre><p><img src="https://img-blog.csdnimg.cn/20190915110156432.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NTQ4Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="drop"><a href="#drop" class="headerlink" title=".drop( , , )"></a>.drop( , , )</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除name</span>allData<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token operator">//</span>第一个参数为要删除的内容，第二第三个参数的形式固定</code></pre><h3 id="替换文件中的内容"><a href="#替换文件中的内容" class="headerlink" title="替换文件中的内容"></a>替换文件中的内容</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可以考虑替换为出现的次数</span>allData<span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">//</span> 替换SibSp中缺失的数据为出现的次数<span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span><span class="token operator">/</span>运行结果<span class="token number">0</span>    <span class="token number">891</span><span class="token number">1</span>    <span class="token number">319</span><span class="token number">2</span>     <span class="token number">42</span><span class="token number">4</span>     <span class="token number">22</span><span class="token number">3</span>     <span class="token number">20</span><span class="token number">8</span>      <span class="token number">9</span><span class="token number">5</span>      <span class="token number">6</span>Name<span class="token punctuation">:</span> SibSp<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64</code></pre><h3 id="合并两个文件中的内容"><a href="#合并两个文件中的内容" class="headerlink" title="合并两个文件中的内容"></a>合并两个文件中的内容</h3><pre class=" language-python"><code class="language-python">allData <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>trainData<span class="token punctuation">,</span>testData<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token operator">//</span>第一个参数为两个文件名，第二第三个参数格式相同</code></pre><h3 id="pd-set-option-设置指定的值"><a href="#pd-set-option-设置指定的值" class="headerlink" title="pd.set_option() 设置指定的值"></a>pd.set_option() 设置指定的值</h3><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>setoption<span class="token punctuation">(</span><span class="token string">'max_rows'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token operator">//</span><span class="token operator">//</span><span class="token operator">//</span>设置最大的行数</code></pre><h3 id="value-counts-获取每个值出现的次数"><a href="#value-counts-获取每个值出现的次数" class="headerlink" title="value_counts()   获取每个值出现的次数"></a>value_counts()   获取每个值出现的次数</h3><pre class=" language-python"><code class="language-python">trainData<span class="token punctuation">[</span><span class="token string">'Pclass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="fillna-用指定方法填充"><a href="#fillna-用指定方法填充" class="headerlink" title="fillna()   用指定方法填充"></a>fillna()   用指定方法填充</h3><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> trainData<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token operator">//</span><span class="token operator">//</span>将年龄用<span class="token number">0</span>来填充</code></pre><h3 id="客串seaborn中的一个方法-distplot-age-画出age的树状图"><a href="#客串seaborn中的一个方法-distplot-age-画出age的树状图" class="headerlink" title="客串seaborn中的一个方法  distplot(age)  画出age的树状图"></a>客串seaborn中的一个方法  distplot(age)  画出age的树状图</h3><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>age<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190915112502222.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NTQ4Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="describe-简要显示数据的数字特征"><a href="#describe-简要显示数据的数字特征" class="headerlink" title="describe()  简要显示数据的数字特征"></a>describe()  简要显示数据的数字特征</h3><pre class=" language-python"><code class="language-python">allData<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190915113352696.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NTQ4Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>### ~corr() 计算相关系数</code></pre><ul><li>method：可选{‘pearson’, ‘kendall’, ‘spearman’}<ul><li>pearson: standard correlation coefficient</li><li>kendall: Kendall Tau correlation coefficient</li><li>spearman: Spearman rank correlation</li></ul></li><li>min_periods： Minimum number of observations required per pair of columns to have a valid result. Currently only available for pearson and spearman correlation </li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算标准相关系数</span>corr_matrix <span class="token operator">=</span> housing<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>corr_matrix<span class="token punctuation">[</span><span class="token string">"median_house_value"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出：</span><span class="token comment" spellcheck="true"># median_house_value    1.000000</span><span class="token comment" spellcheck="true"># median_income         0.687160</span><span class="token comment" spellcheck="true"># total_rooms           0.135097</span><span class="token comment" spellcheck="true"># housing_median_age    0.114110</span><span class="token comment" spellcheck="true"># households            0.064506</span><span class="token comment" spellcheck="true"># total_bedrooms        0.047689</span><span class="token comment" spellcheck="true"># population           -0.026920</span><span class="token comment" spellcheck="true"># longitude            -0.047432</span><span class="token comment" spellcheck="true"># latitude             -0.142724</span><span class="token comment" spellcheck="true"># Name: median_house_value, dtype: float64</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2020/05/24/python-ji-chu/"/>
      <url>/2020/05/24/python-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>[TOC]</p><h2 id="列表是什么？"><a href="#列表是什么？" class="headerlink" title="列表是什么？"></a>列表是什么？</h2><p><strong>列表由一系列特定顺序排列的元素组成的。在python中用 [] 来表示列表，并用 , 来分隔其中的元素。</strong></p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span></code></pre><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><p>访问bicycles中的第一个元素</p><p><code>print(bicycles[0])</code></p><p>可以使用title()方法让元素的格式更整洁</p><p><code>print(bicycles[0].title())</code></p><p><strong>注意：在python中，第一个元素的索引为0，而不是1</strong></p><h3 id="使用列表中的各个值"><a href="#使用列表中的各个值" class="headerlink" title="使用列表中的各个值"></a>使用列表中的各个值</h3><p>可以像其他变量一样使用列表中的各个值。例如：</p><pre class=" language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"My first bicycle was a "</span> <span class="token operator">+</span> bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### My first bicycle was a Trek.</span></code></pre><h3 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h3><p>在python中创建的大多数列表都是动态的，这意味着可以随意地对列表进行修改、删除和添加。</p><p>例如：</p><ol><li><p>修改元素的值</p><pre class=" language-python"><code class="language-python"> bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span> bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trak'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized']</span> <span class="token comment" spellcheck="true">### ['trak', 'cannondale', 'specialized']</span></code></pre></li><li><p>添加元素</p><ol><li><p>在列表的末尾添加元素</p><p><strong>使用append()方法</strong></p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span>bicycles<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized']</span><span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized', 'ducati']</span></code></pre></li><li><p>在列表中插入元素</p><p><strong>使用insert()方法</strong></p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span>bicycles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'ducati'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span></code></pre></li></ol></li></ol><pre><code>    ### [&#39;trek&#39;, &#39;cannondale&#39;, &#39;specialized&#39;]    ### [&#39;ducati&#39;, &#39;trek&#39;, &#39;cannondale&#39;, &#39;specialized&#39;]    ```</code></pre><ol start="3"><li><p>删除元素</p><ol><li><p>如果要知道删除元素的位置，可以使用del语句删除元素</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token keyword">del</span> bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized']</span><span class="token comment" spellcheck="true">### ['cannondale', 'specialized']</span></code></pre><ol start="2"><li><p>使用pop方法删除元素</p><p>有时候，你需要将元素从列表中删除，并接着使用它的值。</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span>popped_bicycles <span class="token operator">=</span> bicycles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>popped_bicycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized']</span><span class="token comment" spellcheck="true">### specialized</span></code></pre><p>实际上，可以使用pop()来删除列表中的任何位置的元素，只需要在括号中指定要删除的元素的索引即可。</p></li></ol></li></ol></li></ol><h1 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h1><h2 id="使用sort-方法对列表进行排序"><a href="#使用sort-方法对列表进行排序" class="headerlink" title="使用sort()方法对列表进行排序"></a>使用sort()方法对列表进行排序</h2><p>在创建的列表中，元素的排列顺序通常是无法预测的，所以可以用sort()方法进行排序。</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span>bicycles<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### ['trek', 'cannondale', 'specialized']</span><span class="token comment" spellcheck="true">### ['cannondale', 'specialized', 'trek']</span></code></pre><h2 id="使用sorted-进行临时排序"><a href="#使用sorted-进行临时排序" class="headerlink" title="使用sorted()进行临时排序"></a>使用sorted()进行临时排序</h2><p>要保留元素原来的排列顺序，同时以特定的顺序将他们呈现出来，可以使用函数sorted()。</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Here is the original list:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nHere is the sorted list:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nHere is the original list again:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##########</span><span class="token comment" spellcheck="true">## Here is the original list:</span><span class="token comment" spellcheck="true">## ['trek', 'cannondale', 'specialized']</span><span class="token comment" spellcheck="true">## Here is the sorted list:</span><span class="token comment" spellcheck="true">## ['cannondale', 'specialized', 'trek']</span><span class="token comment" spellcheck="true">## Here is the original list again:</span><span class="token comment" spellcheck="true">## ['trek', 'cannondale', 'specialized']</span></code></pre><h1 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h1><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">for</span> bicycle <span class="token keyword">in</span> bicycles<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##  trek</span><span class="token comment" spellcheck="true">##  cannondale</span><span class="token comment" spellcheck="true">##  specialized</span></code></pre><p>上面这段代码，我们定义了一个for循环，这行代码让Python从列表bicycles中取出一个名字，并将其存储在bicycle中。然后将其打印出来。输出其中的所有的名字。</p><h1 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h1><h2 id="使用函数range"><a href="#使用函数range" class="headerlink" title="使用函数range()"></a>使用函数range()</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 1</span><span class="token comment" spellcheck="true">## 2</span><span class="token comment" spellcheck="true">## 3</span><span class="token comment" spellcheck="true">## 4</span></code></pre><p>这个示例打印了1—4，这里不包含5.</p><pre class=" language-python"><code class="language-python">numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## [2, 4, 6, 8, 10]</span></code></pre><p>这个示例表示创建列表，列表从2开始，然后不断加2，直到达到或超过最终值，因此最后一个输出结果为10.</p><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>要创建切片，可以指定要使用的第一个元素和最后一个元素的索引。例如：要输出列表的前三个元素，可指定索引0:3.</p><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">,</span> <span class="token string">'qin'</span><span class="token punctuation">]</span><span class="token keyword">for</span> bicycle <span class="token keyword">in</span> bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## trek</span><span class="token comment" spellcheck="true">## cannondale</span><span class="token comment" spellcheck="true">## specialized</span></code></pre><p>上面的例子中使用for循环遍历了bicycles列表中的前三个元素，切片可以指定列表中的任意位置。</p><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>列表非常适用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表至关重要。然而，有时候需要创建一系列不可修改的元素，元组可以实现这种操作。</p><p><strong>元组的定义方法是圆括号 ()</strong></p><pre class=" language-python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 200</span><span class="token comment" spellcheck="true">## 50</span></code></pre><p>元组的值不可修改</p><p><code>dimensions[0] = 250</code></p><p>这句话会报错。</p><pre class=" language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:/Program Files (x86)/PychramProjects/python/python_space.py"</span><span class="token punctuation">,</span> line <span class="token number">48</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">250</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment</code></pre><p><strong>虽然不能修改元组的元素的值，但是可以给存储的元组的变量赋值。因此，如果要修改前诉矩阵的尺寸，可以重新定义整个元组</strong></p><pre class=" language-python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 200</span><span class="token comment" spellcheck="true">## 50</span><span class="token comment" spellcheck="true">## 400</span><span class="token comment" spellcheck="true">## 200</span></code></pre><h1 id="字典（与-Json类似）"><a href="#字典（与-Json类似）" class="headerlink" title="字典（与 Json类似）"></a>字典（与 Json类似）</h1><p>在python中，字典是一系列键—值对。每个键都与一个值相对应，可以使用键来访问值。和C++中的map很相似。下面是一个简单的字典。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字典的练习</span>alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## green</span><span class="token comment" spellcheck="true">## 5</span></code></pre><p>同时，也可以在已经建好的字典里面添加键值对。例如：</p><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span>alien_0<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>alien_0<span class="token punctuation">[</span><span class="token string">'y_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## {'color': 'green', 'points': '5'}</span><span class="token comment" spellcheck="true">## {'color': 'green', 'points': '5', 'x_position': 0, 'y_position': 25}</span></code></pre><p><strong>字典中的值是可以修改的。</strong></p><h3 id="使用-del-函数删除键值对"><a href="#使用-del-函数删除键值对" class="headerlink" title="使用 del 函数删除键值对"></a>使用 del 函数删除键值对</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/24/hello-world/"/>
      <url>/2020/05/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
